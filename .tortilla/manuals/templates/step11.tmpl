## Client

Since we're now familiar with the way mutations work, it's time to add messages and chats removal to our list of features!
Since the most annoying part is going to be dealing with the user interface (because a multiple selection started by a press event is involved), I created an Angular directive to ease the process.

Let's start by adding `ngx-selectable-list`:

    yarn add ngx-selectable-list

{{{ diffStep "7.1" module="client" }}}

Because we're going to use the `libSelectableList` directive, we can replace Outputs and EventEmitters with it:

{{{ diffStep "7.2" module="client" files="src/app/chats-lister/components/chat-item/chat-item.component.ts, src/app/chats-lister/components/chats-list/chats-list.component.ts, src/app/chat-viewer/components/messages-list/messages-list.component.ts" }}}

Don't forget to add the `NgxSelectableListModule` to `ChatViewer` and `ChatLister` modules.

We also created a `ConfirmSelectionComponent` to use for content projection, since our selectable list directive will be able to listen to its events.

{{{ diffStep "7.2" module="client" files="src/app/shared/components/confirm-selection/confirm-selection.component.scss, src/app/shared/components/confirm-selection/confirm-selection.component.ts, src/app/shared/shared.module.ts" }}}

Great, let's finish the component part by adding the connection between our container components and the `ChatsService`. We're going to use `removeMessages` and `removeChat` methods.

{{{ diffStep "7.2" module="client" files="src/app/chat-viewer/containers/chat/chat.component.ts, src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts"}}}

### Connecting actions with the server

The UI part is pretty much complete but we still need to implement two methods in the `ChatsService`. We're going to create mutations to remove a chat, selected messages or all of them.

{{{ diffStep "7.2" module="client" files="src/graphql/removeChat.mutation.ts, src/graphql/removeMessages.mutation.ts, src/graphql/removeAllMessages.mutation.ts" }}}

Once again, we run the GraphQL Code Generator to get the GQL services:

    yarn generator

Now we can import those services, create `removeChat` and `removeMessages` methods in which we call a mutation.

{{{ diffStep "7.2" module="client" files="src/app/services/chats.service.ts" }}}

It might seem like a lot but we simply just updating the store there.

### Summary

The selectable list directive supports much more different use cases, for info please read the documentation.

As you can see `ngx-selectable-list` takes care of most of the boilerplate, giving us the freedom to concentrate on the actual code.