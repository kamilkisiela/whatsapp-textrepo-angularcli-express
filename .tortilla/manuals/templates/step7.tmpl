## Client

Testing is a very important part of each application and for the sake of showing different testing techniques we are going to show how to test a presentational component, a container component and a service.

First let's start by importing `hammerjs` for the Material Gestures inside the test script.

{{{ diffStep "3.1" module="client" files="src/test.ts" }}}

Let's start with the simplest one: the presentational component.
We are not going to inject any service and we don't need to access our backend, so things are quite simple: we just need to pass our Chat object as an Input, detect the changes and use the query selector to match the UI content to the one we passed as input:

{{{ diffStep "3.1" module="client" files="src/app/chats-lister/components/chat-item/chat-item.component.spec.ts" }}}

Testing a service is a bit more complicated because we will need to mock our backend in order to get fake results instead of having to fire up the backend each time.
We are going to simply mock the HTTP calls, which is a well known practice in the REST API world. Since we are using HTTP to retrieve the data, it will work as well with Apollo client:

{{{ diffStep "3.1" module="client" files="src/app/services/chats.service.spec.ts" }}}

In the last example we are going to test a container component, which makes use of several services and multiple other components:

{{{ diffStep "3.1" module="client" files="src/app/chats-lister/containers/chats/chats.component.spec.ts" }}}
